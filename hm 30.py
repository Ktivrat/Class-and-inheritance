# Доброго времени суток. Анастасия. Пока разбирался что это все из себя представляет.
# Заметил, что абстрактные классы и массовое наследование очень даже похожи друг на друга...
# Я вроде понял различия, но не до конца уверен. Все же, стоит чуть больше с этим столкнуться.
# Что бы точно понимать разницу...


#################################################################################################################


# Множественное наследование, как я понял из названия... Соответственно, это когда есть основной класс
# (класс всех классов) и чуть позже (или сразу) делается дополнительный класс, но так как он непосредственно 
# связан с основным, а переписывать в него то, что уже есть - не имеет смысла. Мы в наш новый класс добавляем
# наследование. Соответственно, нет ничего плохого или неправильного в том, чтобы добавить несколько классов
# в новосозданный. То есть, множественное наследование.
 
# Представим, что у нас есть основной класс машина. Машина может ехать использую двигатель.
# Так же в машине есть электроприборы.
# Её можно оборудовать в кровать, но она останется машиной
# В ней можно жить, но это остается машина... 
# Ну, вроде как-то так...


class Car:
    def __init__(self, brand):
        self.brand = brand

    def start_engine(self):
        print(f"Двигатель автомобиля {self.brand} запущен")

class ElectricDevice:
    def turn_on(self):
        print("Электронное устройство включено")

class ElectricCar(Car, ElectricDevice):
    def __init__(self, brand, battery_capacity):
        Car.__init__(self, brand)
        self.battery_capacity = battery_capacity

    def charge(self):
        print(f"Зарядка {self.brand} с емкостью {self.battery_capacity} кВтч")

# Объекты класса ElectricCar
tesla = ElectricCar("Tesla", 85)
tesla.start_engine()    
tesla.turn_on()         
tesla.charge()         


# Нашел простой пример кода абстрактного класса, тк никак не мог понять, что это и зачем.
# В итоге, если я правильно понял. Абстрактный класс, это типа корня всех последующих классов.
# Например авто. Есть абстрактный класс Car. В нем Электрокар, Газкар, абскар, Скайкар (в мечтах)
# И типа уже у этих каров, будет свои характеристики... Ну как то так...

from abc import ABC, abstractmethod

class Animal(ABC):
    def __init__(self, name):
        self.name = name

    @abstractmethod
    def speak(self):
        pass

class Dog(Animal):
    def speak(self):
        return f"{self.name} says Woof!"

class Cat(Animal):
    def speak(self):
        return f"{self.name} says Meow!"

dog = Dog("Buddy")
cat = Cat("Kitty")

print(dog.speak())
print(cat.speak()) 